// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nordew/scope_test/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// WorkerService is an autogenerated mock type for the WorkerService type
type WorkerService struct {
	mock.Mock
}

// HandleErrors provides a mock function with given fields: ctx
func (_m *WorkerService) HandleErrors(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HandleErrors")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogErrors provides a mock function with given fields: ctx
func (_m *WorkerService) LogErrors(ctx context.Context) {
	_m.Called(ctx)
}

// Shutdown provides a mock function with given fields:
func (_m *WorkerService) Shutdown() {
	_m.Called()
}

// Submit provides a mock function with given fields: job
func (_m *WorkerService) Submit(job model.Job) {
	_m.Called(job)
}

// Wait provides a mock function with given fields:
func (_m *WorkerService) Wait() {
	_m.Called()
}

// NewWorkerService creates a new instance of WorkerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerService {
	mock := &WorkerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
